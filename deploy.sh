#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è IFC Converter v2.0 —Å –¥–≤—É—Ö—Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${CYAN}============================================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}============================================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ IFC Converter v2.0"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê DOCKER
# =============================================================================

print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker..."

if ! command -v docker &> /dev/null; then
    print_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–ê–ñ–ù–û: –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –±–µ–∑ sudo
    if ! docker ps &> /dev/null; then
        print_error "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker"
        print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: exit, –∑–∞—Ç–µ–º –∑–∞–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ SSH"
        print_info "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy.sh"
        exit 1
    fi
else
    print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_warning "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    print_info "–í–µ—Ä—Å–∏—è: $(docker-compose version --short)"
fi

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# =============================================================================

print_header "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    print_info "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª..."

    cat > .env << 'EOF'
# OAuth2 Configuration
GOOGLE_CLIENT_ID=your-oauth-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-oauth-client-secret

# Flask Configuration
SECRET_KEY=your-super-secret-key-change-in-production
FLASK_ENV=production
FLASK_DEBUG=0

# Google Sheets API credentials
GS_TYPE=service_account
GS_PROJECT_ID=your-project-id
GS_PRIVATE_KEY_ID=your-private-key-id
GS_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY_HERE\n-----END PRIVATE KEY-----\n"
GS_CLIENT_EMAIL=your-service-account@your-project.iam.gserviceaccount.com
GS_CLIENT_ID=your-client-id
GS_AUTH_URI=https://accounts.google.com/o/oauth2/auth
GS_TOKEN_URI=https://oauth2.googleapis.com/token
GS_AUTH_PROVIDER_X509_CERT_URL=https://www.googleapis.com/oauth2/v1/certs
GS_CLIENT_X509_CERT_URL=https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com
GS_SPREADSHEET_ID=your-spreadsheet-id-here

# Database path for second server
DB_PATH=users_history.db

# Ngrok URL (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
NGROK_URL=
EOF

    print_warning "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª —Å placeholder'–∞–º–∏"
    print_error "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è your-* –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!"
    print_info "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: —Å–º. DEPLOYMENT.md"

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
    read -p "–û—Ç–∫—Ä—ã—Ç—å .env –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–π—á–∞—Å? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ${EDITOR:-nano} .env
    else
        print_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º"
        exit 1
    fi
fi

print_success "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
source .env

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ placeholder'–æ–≤
check_placeholder() {
    local var_name=$1
    local var_value=$2
    local contains_placeholder=$3

    if [[ "$var_value" == *"$contains_placeholder"* ]]; then
        print_error "$var_name —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder '$contains_placeholder'"
        return 1
    fi
    return 0
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º OAuth2 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
has_placeholders=false

if ! check_placeholder "GOOGLE_CLIENT_ID" "$GOOGLE_CLIENT_ID" "your-oauth-client-id"; then
    has_placeholders=true
fi

if ! check_placeholder "GOOGLE_CLIENT_SECRET" "$GOOGLE_CLIENT_SECRET" "your-oauth-client-secret"; then
    has_placeholders=true
fi

if ! check_placeholder "SECRET_KEY" "$SECRET_KEY" "your-super-secret-key"; then
    has_placeholders=true
fi

if ! check_placeholder "GS_PROJECT_ID" "$GS_PROJECT_ID" "your-project-id"; then
    has_placeholders=true
fi

if ! check_placeholder "GS_SPREADSHEET_ID" "$GS_SPREADSHEET_ID" "your-spreadsheet-id"; then
    has_placeholders=true
fi

if [ "$has_placeholders" = true ]; then
    print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env!"
    print_info "–ü–æ–ª—É—á–∏—Ç–µ credentials –≤ Google Cloud Console:"
    print_info "1. OAuth2: https://console.cloud.google.com/apis/credentials"
    print_info "2. Service Account: –¥–ª—è Google Sheets API"
    print_info "3. –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —Å–º. DEPLOYMENT.md"
    exit 1
fi

print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"

# =============================================================================
# –°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô
# =============================================================================

print_header "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
directories=("uploads" "downloads" "logs" "ssl" "templates")

for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        print_info "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
    else
        print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dir"
    fi
done

# –°–æ–∑–¥–∞–µ–º .gitkeep —Ñ–∞–π–ª—ã –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫
for dir in "uploads" "downloads" "logs"; do
    if [ ! -f "$dir/.gitkeep" ]; then
        touch "$dir/.gitkeep"
    fi
done

print_success "–í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–û–í
# =============================================================================

print_header "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service_name=$2

    if lsof -i ":$port" &> /dev/null; then
        print_warning "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç ($service_name)"
        print_info "–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É $port:"
        lsof -i ":$port" | head -5

        # –î–ª—è –ø–æ—Ä—Ç–æ–≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if [ "$port" = "80" ] || [ "$port" = "443" ]; then
            read -p "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—ã? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo systemctl stop apache2 2>/dev/null || true
                sudo systemctl stop nginx 2>/dev/null || true
                print_info "–°–∏—Å—Ç–µ–º–Ω—ã–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            fi
        fi

        return 1
    else
        print_success "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω ($service_name)"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
ports_to_check=(
    "5000:–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä"
    "5001:OAuth2 —Å–µ—Ä–≤–µ—Ä"
    "8080:Nginx proxy"
)

ports_busy=false
for port_info in "${ports_to_check[@]}"; do
    port=${port_info%%:*}
    service=${port_info##*:}

    if ! check_port "$port" "$service"; then
        ports_busy=true
    fi
done

# –ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
if [ "$ports_busy" = true ]; then
    print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã"
    print_info "–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:"
    print_info "1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã"
    print_info "2. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç—ã –≤ docker-compose.yml"
    print_info "3. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"

    read -p "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker-compose down 2>/dev/null || true
        docker stop $(docker ps -q) 2>/dev/null || true
        print_success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
fi

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê DOCKER-COMPOSE.YML
# =============================================================================

print_header "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker"

if [ ! -f "docker-compose.yml" ]; then
    print_error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –í–∞–ª–∏–¥–∞—Ü–∏—è docker-compose.yml
print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å docker-compose.yml..."
if docker-compose config > /dev/null 2>&1; then
    print_success "docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    print_error "–û—à–∏–±–∫–∞ –≤ docker-compose.yml:"
    docker-compose config
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
if grep -q "ifc-converter:" docker-compose.yml && grep -q "ifc-converter2:" docker-compose.yml; then
    print_success "–ù–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞ (ifc-converter –∏ ifc-converter2)"
else
    print_error "–ù–µ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ docker-compose.yml"
    print_info "–¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä–≤–∏—Å—ã: ifc-converter (5000) –∏ ifc-converter2 (5001)"
    exit 1
fi

# =============================================================================
# –û–°–¢–ê–ù–û–í–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –°–ï–†–í–ò–°–û–í
# =============================================================================

print_header "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"

print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
read -p "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker-compose down --rmi all 2>/dev/null || true
    docker system prune -f 2>/dev/null || true
    print_success "–°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã"
fi

# =============================================================================
# –°–ë–û–†–ö–ê –û–ë–†–ê–ó–û–í
# =============================================================================

print_header "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"

print_info "–°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."

# –°–±–æ—Ä–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
if docker-compose build --no-cache; then
    print_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
else
    print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
    exit 1
fi

# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í
# =============================================================================

print_header "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"

print_info "–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."

if docker-compose up -d; then
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
else
    print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
    print_info "–õ–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    docker-compose logs --tail=20
    exit 1
fi

# =============================================================================
# –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê
# =============================================================================

print_header "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"

print_info "–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê
# =============================================================================

print_header "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"

print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç–¥–µ–ª—å–Ω–æ
services=("ifc-converter" "ifc-converter2" "nginx")
all_healthy=true

for service in "${services[@]}"; do
    if docker-compose ps "$service" | grep -q "Up"; then
        print_success "$service: –∑–∞–ø—É—â–µ–Ω"
    else
        print_error "$service: –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞"
        all_healthy=false

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ $service:"
        docker-compose logs --tail=10 "$service" || true
    fi
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò
# =============================================================================

print_header "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint'–∞
check_endpoint() {
    local url=$1
    local description=$2
    local timeout=${3:-10}

    if curl -f -s -m "$timeout" "$url" > /dev/null 2>&1; then
        print_success "$description: –¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        return 0
    else
        print_warning "$description: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
endpoints=(
    "http://localhost:5000/:–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä (–±–µ–∑ OAuth2)"
    "http://localhost:5001/:OAuth2 —Å–µ—Ä–≤–µ—Ä (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)"
    "http://localhost:8080/:Nginx proxy (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–æ—Å—Ç—É–ø)"
    "http://localhost:5000/health:Health check - –æ—Å–Ω–æ–≤–Ω–æ–π"
    "http://localhost:5001/health:Health check - OAuth2"
    "http://localhost:8080/health:Health check - —á–µ—Ä–µ–∑ Nginx"
)

healthy_endpoints=0
total_endpoints=${#endpoints[@]}

for endpoint_info in "${endpoints[@]}"; do
    url=${endpoint_info%%:*}
    description=${endpoint_info##*:}

    if check_endpoint "$url" "$description" 15; then
        ((healthy_endpoints++))
    fi
done

print_info "–î–æ—Å—Ç—É–ø–Ω–æ endpoint'–æ–≤: $healthy_endpoints/$total_endpoints"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê GOOGLE API
# =============================================================================

print_header "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ Google API"

print_info "–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ OAuth2 —Å–µ—Ä–≤–µ—Ä
if docker-compose exec -T ifc-converter2 python3 -c "
from gsheets import validate_gs_credentials
try:
    validate_gs_credentials()
    print('Google Sheets API: OK')
except Exception as e:
    print(f'Google Sheets API Error: {e}')
    exit(1)
" 2>/dev/null; then
    print_success "Google Sheets API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    print_warning "Google Sheets API: –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ GS_* –≤ .env —Ñ–∞–π–ª–µ"
fi

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê OAUTH2
# =============================================================================

print_header "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ OAuth2"

print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º OAuth2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."

oauth_vars=("GOOGLE_CLIENT_ID" "GOOGLE_CLIENT_SECRET")
oauth_ok=true

for var in "${oauth_vars[@]}"; do
    if docker-compose exec -T ifc-converter2 printenv "$var" > /dev/null 2>&1; then
        print_success "$var: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        print_error "$var: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
        oauth_ok=false
    fi
done

if [ "$oauth_ok" = true ]; then
    print_success "OAuth2 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    print_info "–¢–µ—Å—Ç–æ–≤—ã–π URL –¥–ª—è –≤—Ö–æ–¥–∞: http://localhost:5001/login"
else
    print_warning "OAuth2 –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
fi

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =============================================================================

print_header "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite..."

if docker-compose exec -T ifc-converter2 python3 -c "
import sqlite3
import os
db_path = os.getenv('DB_PATH', 'users_history.db')
try:
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\"')
    tables = cursor.fetchall()
    print(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {len(tables)} —Ç–∞–±–ª–∏—Ü')
    for table in tables:
        cursor.execute(f'SELECT COUNT(*) FROM {table[0]}')
        count = cursor.fetchone()[0]
        print(f'  {table[0]}: {count} –∑–∞–ø–∏—Å–µ–π')
    conn.close()
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK')
except Exception as e:
    print(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Error - {e}')
    exit(1)
" 2>/dev/null; then
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    print_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)"
fi

# =============================================================================
# –ò–¢–û–ì–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
# =============================================================================

print_header "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

echo -e "${GREEN}============================================================${NC}"
echo -e "${GREEN}‚úÖ IFC Converter v2.0 —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!${NC}"
echo -e "${GREEN}============================================================${NC}"
echo
echo -e "${CYAN}üìç –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:${NC}"
echo -e "${WHITE}  –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏): ${GREEN}http://localhost:5000/${NC}"
echo -e "${WHITE}  OAuth2 —Å–µ—Ä–≤–µ—Ä (—Å –∏—Å—Ç–æ—Ä–∏–µ–π):        ${GREEN}http://localhost:5001/${NC}"
echo -e "${WHITE}  Nginx proxy (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):       ${GREEN}http://localhost:8080/${NC}"
echo
echo -e "${CYAN}üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:${NC}"
echo -e "${WHITE}  Health Check –æ—Å–Ω–æ–≤–Ω–æ–π:     ${GREEN}http://localhost:5000/health${NC}"
echo -e "${WHITE}  Health Check OAuth2:       ${GREEN}http://localhost:5001/health${NC}"
echo -e "${WHITE}  Health Check Nginx:        ${GREEN}http://localhost:8080/health${NC}"
echo
echo -e "${CYAN}üîê OAuth2 —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}"
echo -e "${WHITE}  –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google:         ${GREEN}http://localhost:5001/login${NC}"
echo -e "${WHITE}  Dashboard (–ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞):   ${GREEN}http://localhost:5001/dashboard${NC}"
echo

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π IP –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
external_ip=""
if command -v curl &> /dev/null; then
    external_ip=$(curl -s -m 5 ifconfig.me 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    if [ "$external_ip" != "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" ] && [ -n "$external_ip" ]; then
        echo -e "${CYAN}üåç –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω firewall):${NC}"
        echo -e "${WHITE}  http://${external_ip}:8080/${NC}"
        echo
    fi
fi

echo -e "${CYAN}üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "${WHITE}  –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:              ${YELLOW}docker-compose logs -f${NC}"
echo -e "${WHITE}  –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ OAuth2:       ${YELLOW}docker-compose logs -f ifc-converter2${NC}"
echo -e "${WHITE}  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:             ${YELLOW}docker-compose ps${NC}"
echo -e "${WHITE}  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:                  ${YELLOW}docker-compose restart${NC}"
echo -e "${WHITE}  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:                   ${YELLOW}docker-compose down${NC}"
echo -e "${WHITE}  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞):     ${YELLOW}./rebuild.sh${NC}"
echo -e "${WHITE}  –¢–µ—Å—Ç OAuth2:                 ${YELLOW}python3 test_oauth.py${NC}"
echo

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
if [ "$healthy_endpoints" -lt "$total_endpoints" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:${NC}"
    echo -e "${WHITE}  –ù–µ –≤—Å–µ endpoint'—ã –¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs${NC}"
    echo
fi

echo -e "${CYAN}üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo -e "${WHITE}1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É IFC —Ñ–∞–π–ª–∞: http://localhost:8080/${NC}"
echo -e "${WHITE}2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: http://localhost:5001/login${NC}"
echo -e "${WHITE}3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –∏ SSL (—Å–º. DEPLOYMENT.md)${NC}"
echo -e "${WHITE}4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ${NC}"
echo
echo -e "${GREEN}üéØ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ v2.0 –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
read -p "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    docker-compose logs -f
fi